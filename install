#!/bin/bash

_rc_fns="/etc/init.d/functions.sh"
_rc_fns_fallback="/etc/init.d/functions"
if [ -f "$_rc_fns" ]; then
        source $_rc_fns
elif [ -f "$_rc_fns_fallback" ]; then
        source $_rc_fns_fallback
else
        einfo () {
                printf "%s\n" "$*"
        }
        ebegin () {
                printf "%s ...\n" "$*"
        }
        eend () {
                _ret=$?
                printf "\n"; return $_ret
        }
        export -f einfo ebegin eend
        einfo "init.d functions not found, using custom fallback."
fi

ebegin "Sourcing custom scripts in .bashrc"
GIT_DIR=$(git rev-parse --show-toplevel)
SOURCE_LINE="source \"$GIT_DIR/env-init\""
grep -q -F "$SOURCE_LINE" $HOME/.bashrc || printf "\n# execute custom init script\n$SOURCE_LINE" >> $HOME/.bashrc
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

ebegin "Sourcing aliases"
# source aliases
for f in "$GIT_DIR"/aliases/*; do
	SOURCE_LINE="source \"$f\""
	grep -q -F "$SOURCE_LINE" $HOME/.bashrc || printf "\n$SOURCE_LINE" >> $HOME/.bashrc
done
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

LOCAL_BIN=$(systemd-path user-binaries)
ebegin "Copying custom scripts to $LOCAL_BIN"
# copy custom executables
if [ -d "$LOCAL_BIN" ] ; then
    cp -ax "$GIT_DIR/bin/*" "$LOCAL_BIN"
    cp -ax "$GIT_DIR/qemu/*" "$LOCAL_BIN"
fi
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

# copy mounter
#ebegin "Installing shared dir mounter"
#NM_CONF_DIR="/etc/NetworkManager/dispatcher.d/"
#POST_CONN_HOOK="$NM_CONF_DIR/99-mounter"
#sudo cp -ax $GIT_DIR/network/mounter $POST_CONN_HOOK
# change owner to root
#sudo chown root:root $POST_CONN_HOOK
#eend $?
#rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi
