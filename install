#!/bin/bash

_rc_fns="/etc/init.d/functions.sh"
_rc_fns_fallback="/etc/init.d/functions"
if [ -f "$_rc_fns" ]; then
        source $_rc_fns
elif [ -f "$_rc_fns_fallback" ]; then
        source $_rc_fns_fallback
else
        einfo () {
                printf "%s\n" "$*"
        }
        ebegin () {
                printf "%s ...\n" "$*"
        }
        eend () {
                _ret=$?
                printf "\n"; return $_ret
        }
        export -f einfo ebegin eend
        einfo "init.d functions not found, using custom fallback."
fi

ebegin "Sourcing custom scripts in .bashrc"
GIT_DIR=$(git rev-parse --show-toplevel)
SOURCE_LINE="source \"$GIT_DIR/env-init\""
grep -q -F "$SOURCE_LINE" $HOME/.bashrc || printf "\n# execute custom init script\n$SOURCE_LINE" >> $HOME/.bashrc
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

ebegin "Sourcing aliases"
# source aliases
for f in "$GIT_DIR"/aliases/*; do
	SOURCE_LINE="source \"$f\""
	grep -q -F "$SOURCE_LINE" $HOME/.bashrc || printf "\n$SOURCE_LINE" >> $HOME/.bashrc
done
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

ebegin "Copying custom scripts to $HOME/bin"
# copy custom executables
if [ -d "$HOME/bin" ] ; then
    cp -ax $GIT_DIR/bin/* $HOME/bin
    cp -ax $GIT_DIR/qemu/* $HOME/bin
fi
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

ebegin "Patching buildkernel script"
sed -i "s,^_kernel_conf_dir=\"\"$,_kernel_conf_dir=\"$GIT_DIR/kernel.conf\",g" $HOME/bin/buildkernel
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi
