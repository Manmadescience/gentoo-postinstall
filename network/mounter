#!/usr/bin/env python3

import os
import argparse
import enum
import sys
import libmount


# $ nmcli connection show
uuids = [
    '06fcce0f-607a-45c1-81b5-1772be037f3b'
]
conn_names = [
    'netqa'
]

user = 'hoefling'

network_root = os.path.join('//', 'master.qanet.local')
mount_root = os.path.join('/', 'mnt', 'master')
samba_creds = os.path.join('/', 'home', 'hoefling', '.netqa', 'smbcredentials')


########################################################################
class State(enum.Enum):
    '''Connection states'''
    up = 'up'
    down = 'down'
    pre_up = 'pre-up'
    post_down = 'post-down'
    pre_down = 'pre-down'

#----------------------------------------------------------------------
def mkcifs(source: str, target: str) -> libmount.Context:
    ''''''
    ctx = libmount.Context()
    ctx.fstype = 'cifs'
    ctx.options = (
        'rw,_netdev,user,exec,uid={user},'
        'gid={user},credentials={creds}'
    ).format(user=user, creds=samba_creds)
    ctx.source = source
    ctx.target = target
    return ctx

#----------------------------------------------------------------------
def unmounter() -> libmount.Context:
    ''''''
    ctx = libmount.Context()
    ##cxt.enable_force(True)
    cxt.enable_lazy(True)
    cxt.options = 'cifs'
    return ctx

#----------------------------------------------------------------------
def main():
    '''entry point'''

    # this won't work as mount is only possible after tun0 is connected
##    if 'CONNECTION_ID' not in os.environ or os.environ['CONNECTION_ID'] not in conn_names:
##        return 0

    parser = argparse.ArgumentParser()
    parser.add_argument('connstate', nargs='+')
    args = parser.parse_args()
    if not args.connstate or len(args.connstate) < 2:
        return 1

    interface = args.connstate[0]
    state = State(args.connstate[1])

    if interface == 'tun0' and state == State.up:

        cifs = [
            mkcifs(os.path.join('//', '172.16.132.1', 'Testumgebung'), os.path.join(mount_root, 'test_environment')),
            mkcifs(os.path.join('//', '172.16.132.1', 'Storage'), os.path.join(mount_root, 'storage')),
            mkcifs(os.path.join(network_root, 'testenv'), os.path.join(mount_root, 'env')),
            mkcifs(os.path.join(network_root, 'TestTools'), os.path.join(mount_root, 'testtools')),
            mkcifs(os.path.join(network_root, 'FrameWork'), os.path.join(mount_root, 'framework')),
            mkcifs(os.path.join(network_root, 'Projects'), os.path.join(mount_root, 'projects')),
            mkcifs(os.path.join(network_root, 'TestImplementation'), os.path.join(mount_root, 'test_implementation')),
            mkcifs(os.path.join(network_root, 'sphinx_docs'), os.path.join(mount_root, 'sphinx_docs')),
        ]

        for ctx in cifs:
            if not os.path.isdir(ctx.target):
                os.makedirs(ctx.target)
            ctx.mount()

##    if interface == 'tun0' and state == State.pre_down:
    if state == State.pre_down:
        unmounter().umount()

    return 0


if __name__ == '__main__':
    sys.exit(main())
