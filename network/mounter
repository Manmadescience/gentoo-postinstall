#!/usr/bin/env python3.5

import argparse
import enum
import pathlib
import sys
import syslog
import time
import libmount


# $ nmcli connection show
uuids = [
    '06fcce0f-607a-45c1-81b5-1772be037f3b'
]
conn_names = [
    'netqa'
]

user = 'hoefling'

network_root = pathlib.Path('//', 'master.qanet.local')
network_root2 = pathlib.Path('//', '172.16.132.1')
mount_root = pathlib.Path('/', 'mnt', 'master')
samba_creds = pathlib.Path('/', 'home', 'hoefling', '.netqa', 'smbcredentials')


########################################################################
class State(enum.Enum):
    '''Connection states'''
    up = 'up'
    down = 'down'
    pre_up = 'pre-up'
    post_down = 'post-down'
    pre_down = 'pre-down'
    vpn_up = 'vpn-up'
    vpn_down = 'vpn-down'
    vpn_pre_up = 'vpn-pre-up'
    vpn_pre_down = 'vpn-pre-down'

#----------------------------------------------------------------------
def mkcifs(source: pathlib.Path, target: pathlib.Path) -> libmount.Context:
    ''''''
    ctx = libmount.Context()
    ctx.fstype = 'cifs'
    ctx.options = (
        'rw,_netdev,user,exec,uid={user},'
        'gid={user},credentials={creds}'
    ).format(user=user, creds=samba_creds)
    ctx.source = str(source)
    ctx.target = str(target)
    return ctx

#----------------------------------------------------------------------
def unmounter(source: pathlib.Path) -> libmount.Context:
    ''''''
    ctx = libmount.Context()
    ctx.enable_force(True)
    ##ctx.enable_lazy(True)
    ctx.options = 'cifs'
    ctx.source = str(source)
    ctx.target = str(source)
    return ctx

#----------------------------------------------------------------------
def main() -> int:
    '''entry point'''

    syslog.syslog('mounter started ...')

    # this won't work as mount is only possible after tun0 is connected
##    if 'CONNECTION_ID' not in os.environ or os.environ['CONNECTION_ID'] not in conn_names:
##        return 0

    parser = argparse.ArgumentParser()
    parser.add_argument('connstate', nargs='+')
    args = parser.parse_args()
    if not args.connstate or len(args.connstate) < 2:
        return 1

    interface = args.connstate[0]
    state = State(args.connstate[1])

    mount_mapping = {
        network_root / 'testenv': mount_root / 'env',
        network_root / 'TestTools': mount_root / 'testtools',
        network_root / 'FrameWork': mount_root / 'framework',
        network_root / 'Projects': mount_root / 'projects',
        network_root / 'TestImplementation': mount_root / 'test_implementation',
        network_root / 'sphinx_docs': mount_root / 'sphinx_docs',
        network_root2 / 'Testumgebung': mount_root / 'test_environment',
        network_root2 / 'Storage': mount_root / 'storage',
    }

    if interface == 'tun0' and state == State.vpn_up:
        syslog.syslog('mounting network shares ...')

        for source, target in mount_mapping.items():
            if not target.is_dir():
                target.mkdir(parents=True, exist_ok=True)
            try:
                mkcifs(source, target).mount()
            except Exception as error:
                syslog.syslog(str(error))
        time.sleep(5)

    if interface == 'tun0' and state == State.vpn_down:
        syslog.syslog('unmounting network shares ...')
        for source in sorted(mount_mapping.keys()):
            try:
                unmounter(source).umount()
                time.sleep(5)
            except Exception as error:
                syslog.syslog(str(error))

    syslog.syslog('mounter finished')
    return 0


if __name__ == '__main__':
    sys.exit(main())
