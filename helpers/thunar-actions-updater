#!/usr/bin/env bash
# ------------------------------------------------------------------
# Name: thunar-actions-updater
# ------------------------------------------------------------------
# Description: (Re)installs custom netqa framework-related actions
# in Thunar file manager.
# ------------------------------------------------------------------
# Author: Oleg Hoefling (oleg.hoefling@netqa.de)
# ------------------------------------------------------------------
# Copyright (C) netqa GmbH (http://www.netqa.de)
# ------------------------------------------------------------------

# just for convenience
die() {
	printf "%s" "${@+$@$'\n'}" 1>&2 ; exit 1;
}

# verify some useful tools are present
XSLT_PROCESSOR=$(command -v xsltproc) || die "ERROR: xsltproc not found. Install libxslt package."
XML_VALIDATOR=$(command -v xmllint) || die "ERROR: xmllint not found. Install libxml2 package."
UUID_GENERATOR=$(command -v uuidgen) || die "ERROR: uuidgen not found. Install e2fsprogs package."

[ -z "$1" ] && die "ERROR: directory containing python virtual environments expected."
ENV_DIR=$1

THUNAR_ACTIONS_CONFIG="$HOME/.config/Thunar/uca.xml"
[ -f "$THUNAR_ACTIONS_CONFIG" ] || die "ERROR: no config file for Thunar custom actions found. Check if Thunar is installed correctly."
$XML_VALIDATOR $THUNAR_ACTIONS_CONFIG 2>/dev/null || die "ERROR: config file for Thunar custom actions is corrupted. Reinstall Thunar."

HEAD=$(cat <<- EOM
<?xml version="1.0" encoding="UTF-8"?>
<!--
\tGenerator of custom actions in Thunar file manager
\t##################################################
\tAuthor: Oleg Hoefling (oleg.hoefling@netqa.de)
\t##################################################
\tCopyright (C) netqa GmbH
\tUnauthorized copying of this file, via any medium
\tis strictly prohibited
\t##################################################
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
\t<xsl:output method="xml" indent="yes" omit-xml-declaration="yes"/>
\t<xsl:strip-space elements="*"/>
EOM
)

TAIL=$(cat <<- EOM
\t<xsl:template match="@* | node()">
\t\t<xsl:copy>
\t\t\t<xsl:apply-templates select="@* | node()"/>
\t\t</xsl:copy>
\t</xsl:template>
\t<xsl:template match="/actions/action[unique-id[starts-with(., 'netqa-framework-')]]" />
\t<xsl:template match="/actions">
\t\t<xsl:copy>
\t\t\t<xsl:apply-templates select="@* | node()"/>
\t\t\t<xsl:copy-of select="\$custom_actions" />
\t\t</xsl:copy>
\t</xsl:template>
</xsl:stylesheet>
EOM
)

function action {
	local ENV_NAME=$1
	local ENV_ACTIVATE=$SHARED/$ENV_NAME/bin/activate
	if [ -f "$ENV_ACTIVATE" ]; then
		printf ""
	else
		local ACTION=$(cat <<- EOM
		\t\t<action>
		\t\t\t<icon/>
		\t\t\t<name>Run with netqa-framework ($ENV_NAME)</name>
		\t\t\t<unique-id>netqa-framework-$ENV_NAME</unique-id>
		\t\t\t<command>exo-open --working-directory=%%d --launch TerminalEmulator "/usr/bin/env bash -c &quot;source $ENV_DIR/$ENV_NAME/bin/activate &amp;&amp; pwd &amp;&amp; which python &amp;&amp; python %%f; deactivate&quot;"</command>
		\t\t\t<description>Run with netqa-framework (code from $ENV_NAME environment)</description>
		\t\t\t<patterns>*.py</patterns>
		\t\t\t<startup-notify/>
		\t\t\t<directories/>
		\t\t\t<text-files/>
		\t\t</action>
		EOM
		)
		printf "$ACTION\n"
	fi
}

function generate_stylesheet {
	export -f action
	ACTIONS=$((cd $ENV_DIR && find . -maxdepth 1 -type d) | tail -n +2 | cut -c 3- | sort | uniq | xargs -r -n 1 /usr/bin/env bash -c 'action "$@"' _)
	printf "$HEAD\n"
	printf "\t<xsl:variable name=\"custom_actions\">\n%s\n\t</xsl:variable>\n" "$ACTIONS"
	printf "$TAIL\n"
}

STYLESHEET=/tmp/$($UUID_GENERATOR).xsl
generate_stylesheet > $STYLESHEET
$XSLT_PROCESSOR -o $THUNAR_ACTIONS_CONFIG $STYLESHEET $THUNAR_ACTIONS_CONFIG
[ $? -ne 0 ] && die "ERROR: something went wrong, please contact the author."
printf "INFO: Scanned %s, custom Thunar actions installed.\n" $ENV_DIR
