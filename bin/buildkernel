#!/bin/bash

_rc_fns="/etc/init.d/functions.shs"
_rc_fns_fallback="/etc/init.d/functions"
if [ -f "$_rc_fns" ]; then
	source $_rc_fns
elif [ -f "$_rc_fns_fallback" ]; then
	source $_rc_fns_fallback
else
	einfo () {
		printf "%s\n" "$*"
	}
	ebegin () {
		printf "%s ...\n" "$*"
	}
	eend () {
		_ret=$?
		printf "\n"; return $_ret
	}
	export -f einfo ebegin eend
	einfo "init.d functions not found, using custom fallback."
fi



ebegin "Entering linux source dir"
_sourcedir="/usr/src/linux"
cd $_sourcedir
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

ebegin "Determining kernel source version"
version=$(make kernelversion)
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi
einfo "Kernel source version: $version"

ebegin "Copying DSDT table patch"
_dsdt_patch="/home/hoefling/programming/misc/msi-gx70-3cc-acpi-fixes/dsdt.hex"
_dsdt_target="$_sourcedir/dsdt_table.h"
cp $_dsdt_patch $_dsdt_target
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

ebegin "Compiling kernel sources with existing config"
make -j5 > /dev/null
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

ebegin "Installing kernel modules"
make modules_install -j5 > /dev/null
make install > /dev/null
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

ebegin "Copying kernel to boot dir"
cp /boot/vmlinuz-$version /boot/efi/boot/bootx64.efi
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

#ebegin "Signing kernel with custom secure boot keys"
#sbsign --key /etc/efikeys/db.key --cert /etc/efikeys/db.crt --output /boot/efi/boot/bootx64.efi.signed /boot/efi/boot/bootx64.efi
#eend $?
#rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

#ebegin "Backing up unsigned kernel"
#mv /boot/efi/boot/bootx64.efi /boot/efi/boot/bootx64.efi.unsigned
#cp /boot/efi/boot/bootx64.efi.signed /boot/efi/boot/bootx64.efi
#eend $?
#rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

ebegin "Rebuilding modules"
make modules_prepare 1> /dev/null && emerge @module-rebuild 1> /dev/null
eend $?
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi

einfo "Kernel compiled, you may reboot now."
