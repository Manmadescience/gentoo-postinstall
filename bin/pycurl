#!/usr/bin/env python

'''
Basically, this is nothing but

.. code-block::bash

   $ curl ${CURL_ARGS} | python -mjson.tool | pygmentize -l json  # example for JSON content type

only in python. I don't want to battle bash on reinterpreting
quoted cURL args when trying to wrap this into a script
or aliasing it.

No cli help whatsoever, used only as another tool for quick
and dirty interacting with the server backend via REST API.

Example usage:

.. code-block::bash

   $ pycurl -s http://localhost:8000/api/v2/projects/
   $ pycurl -i -H "Authorization: JWT my-token" http://localhost:8000/api/v2/projects/1/testcases/
   $ pycurl -X PATCH -H "Authorization: JWT my-token" -d '{"name": "foo"}' http://localhost:8000/api/v2/projects/1/testcases/1/

The header `Content-Type: application/json` will be inserted
automatically if not passed via cli.

Disclaimer: no warranty whatsoever, use at your own risk.

For quick testing:

.. code-block::bash

   $ curl http://eu.httpbin.org/get     # json
   $ curl http://eu.httpbin.org/xml     # xml
   $ curl http://eu.httpbin.org/html    # html

'''


from __future__ import absolute_import, division, print_function

import argparse
import io
import itertools
import json
import re
import subprocess
import sys


formatter_plain = lambda text: text
colorer_plain = lambda lexer, text: print(text)


#----------------------------------------------------------------------
def formatter_html(unformatted):
    return bs4.BeautifulSoup(unformatted, 'html.parser').prettify()


#----------------------------------------------------------------------
def formatter_xml(unformatted):
    return lxml.etree.tostring(
        lxml.etree.fromstring(
            unformatted.encode('utf-8'),
            parser=lxml.etree.XMLParser(encoding='utf-8')
        ),
        pretty_print=True,
        method='xml'
    ).decode('utf-8')


#----------------------------------------------------------------------
def colorer(lexername, text):

    formatter = pygments.formatters.terminal.TerminalFormatter()
    formatter.encoding = pygments.util.terminal_encoding(sys.stdout)
    out = sys.stdout.buffer if sys.version_info > (3,) else sys.stdout

    try:
        lexer = pygments.lexers.get_lexer_by_name(lexername)
    except ClassNotFound:
        lexer = None

    if not lexer:
        try:
            lexer = pygments.lexers.guess_lexer(text)
        except ClassNotFound:
            lexer = pygments.lexers.special.TextLexer()

    pygments.cmdline.highlight(text, lexer, formatter, out)


try:
    import bs4
except ImportError:
    formatter_html = formatter_plain

try:
    import lxml.etree
except ImportError:
    formatter_xml = formatter_plain


try:
    import pygments.cmdline
except ImportError:
    colorer = colorer_plain


#----------------------------------------------------------------------
def formatter_json(unformatted):
    ''''''
    return json.dumps(json.loads(unformatted), indent=4)


#----------------------------------------------------------------------
def main():
    ''''''
    (_, args) = argparse.ArgumentParser().parse_known_args()
    print_headers = any(arg in args for arg in ['-i', '--include'])

    try:
        out = subprocess.check_output(['curl'] + args + ['--include'])
        matcher_encoding = re.compile(b'charset=(.*?)(;|\s|\n|\r\n|$)', re.MULTILINE)
        encoding = next(item.group(1) for item in itertools.islice(re.finditer(matcher_encoding, out), 1))
        out = out.decode(encoding=encoding.decode())
    except subprocess.CalledProcessError:
        return 1
    except StopIteration:  # charset information not found or present, try default encoding
        out = out.decode()

    (headers, payload) = out.strip().split('\r\n\r\n', 1)

    matcher = re.compile('Content-Type:\s+(.*?)(;|\s|$)', re.MULTILINE)
    content_type = next(item.group(1) for item in itertools.islice(re.finditer(matcher, out), 1))

    if content_type == 'application/json':
        lexer = 'json'
        formatter = formatter_json
    elif content_type == 'text/html':
        lexer = 'html'
        formatter = formatter_html
    elif content_type == 'application/xml':
        lexer = 'xml'
        formatter = formatter_xml
    else:
        lexer = ''
        formatter = no_format

    if print_headers:
        print(headers + '\n')

    colorer(lexer, formatter(payload))
    return 0


if __name__ == '__main__':
    sys.exit(main())
